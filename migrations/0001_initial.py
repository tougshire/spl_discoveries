# Generated by Django 5.0.3 on 2024-05-23 21:46

import datetime
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('spl_members', '0004_alter_member_options_alter_member_end_date_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_full', models.CharField(help_text='The name of the customer', max_length=80, verbose_name='name')),
                ('name_prefered', models.CharField(blank=True, help_text='Nickname, or a name the customer prefers in place of their first name', max_length=30, verbose_name='prefered name')),
                ('email', models.EmailField(blank=True, help_text="The customer's email address", max_length=254, verbose_name='email')),
                ('phone', models.CharField(blank=True, help_text="The customer's phone number", max_length=30, verbose_name='phone')),
            ],
            options={
                'ordering': ('name_full',),
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_full', models.CharField(help_text='The full name of the location', max_length=40, verbose_name='location name')),
                ('name_abbr', models.CharField(help_text='An abbreviation of the name', max_length=5, verbose_name='abbreviated name')),
            ],
            options={
                'ordering': ('name_full',),
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the topic', max_length=40, verbose_name='name')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customers_request', models.TextField(blank=True, help_text="The customer's own words describing their request", verbose_name="customer's request")),
                ('customers_available', models.TextField(blank=True, help_text="The customer's stated preference regarding scheduling", verbose_name="customer's availability")),
                ('request_summary', models.CharField(blank=True, help_text="A staff summary of the customer's request", max_length=100, verbose_name='request summary')),
                ('when_submitted', models.DateField(blank=True, help_text='The date and time that the customer submitted the request', null=True, verbose_name='date submitted')),
                ('when_scheduled', models.DateTimeField(blank=True, help_text='The date and time of the scheduled appointment', null=True, verbose_name='date/time')),
                ('status', models.IntegerField(choices=[(40, 'Canceled'), (41, 'No-Show'), (0, 'Requested'), (10, 'Contact Attempted'), (14, 'Delayed'), (18, 'Scheduled'), (99, 'Complete')], help_text='The status of this appointment', verbose_name='status')),
                ('staffer', models.ForeignKey(blank=True, help_text='The staff members who is assigned to this appontment or who did the appointment', null=True, on_delete=django.db.models.deletion.SET_NULL, to='spl_members.member', verbose_name='staff member')),
                ('customer', models.ForeignKey(blank=True, help_text='The customer for  whom the apointment is made', null=True, on_delete=django.db.models.deletion.SET_NULL, to='spl_discoveries.customer')),
                ('where_scheduled', models.ForeignKey(blank=True, help_text='The scheduled location for the appointment', null=True, on_delete=django.db.models.deletion.SET_NULL, to='spl_discoveries.location')),
            ],
            options={
                'ordering': ('when_submitted',),
            },
        ),
        migrations.CreateModel(
            name='Appointmentnote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateField(default=datetime.date.today, help_text='The effective date of the information in the note ( rather than the date the note was made )', null=True, verbose_name='when')),
                ('content', models.CharField(blank=True, help_text='The text of the note.  Optional if a category is chosen and no other details are necessary.', max_length=125, verbose_name='content')),
                ('appointment', models.ForeignKey(help_text='The appointment to which this note applies', null=True, on_delete=django.db.models.deletion.SET_NULL, to='spl_discoveries.appointment')),
            ],
            options={
                'ordering': ['-when'],
            },
        ),
        migrations.CreateModel(
            name='Customernote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateField(default=datetime.date.today, help_text='The effective date of the information in the note ( rather than the date the note was made )', null=True, verbose_name='when')),
                ('content', models.CharField(blank=True, help_text='The text of the note.  Optional if a category is chosen and no other details are necessary.', max_length=125, verbose_name='description')),
                ('customer', models.ForeignKey(help_text='The customer to whom this note applies', null=True, on_delete=django.db.models.deletion.SET_NULL, to='spl_discoveries.customer')),
            ],
            options={
                'ordering': ['-when'],
            },
        ),
    ]
